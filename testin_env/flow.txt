Flow:

START::
players[player_idx]>notify(Trigger::Start);
for(int i = 0; i < minions[player_idx].size(); ++i){
    minions[player_idx]->notify(Trigger::Start);
}
rituals[player_idx] -> notify(Trigger::Start);

for(int i = 0; i < minions[player_idx].size(); ++i){
    minions[player_idx^1]->notify(Trigger::Start);
}

rituals[player_idx^1] -> notify(Trigger::Start);



END::
players[player_idx]>notify(Trigger::End);
for(int i = 0; i < minions[player_idx].size(); ++i){
    minions[player_idx]->notify(Trigger::End);
}
rituals[player_idx] -> notify(Trigger::End);

for(int i = 0; i < minions[player_idx].size(); ++i){
    minions[player_idx^1]->notify(Trigger::End);
}

rituals[player_idx^1] -> notify(Trigger::End);

player_idx^=1;

ATTACK(i,j)::
Minions[player_idx^1][j]->collision(Minions[player_idx][i]);
die(Minions[player_idx^1][j]);
Minions[player_idx][i]->collision(Minions[player_idx^1][j]);
die(Minions[player_idx][i]);

Attack(i)::
Players[player_idx^1]->collision(Minions[player_idx][i]);
if(Players[player_idx^1]->isDead()) ENDGAME!!

Play(i)::

Card* c = players[player_idx]->getCard(i);
if(c is minion) check the board size. put down      notify MEnter
if(c is spell) check if single. single returns false. if not single, apply to the area.     
if(c is ritual) replace the current ritual
if(c is enchantment) return false
    

Play(i,j,ch)::

Card* c = players[player_idx]->getCard(i);
if(c is minion) return false;
if(c is spell) check if single. Not single returns false. Apply to the target
if(c is ritual) return false;
if(c is enchantment) apply to that target. 

Use(i)::

Card *c = minions[player_idx][i];
c == nullptr return false;
if(c does not have activation skill) return false;
if(single) return false;
if(not single, and check magic) apply.


Use(i,j,ch)::

Card *c = minions[player_idx][i];
c == nullptr return false;
if(c does not have activation skill) return false;
if(not single) return false;
if(single, and check magic) apply.

Invariant:: 
Unsummmon and die may cause MLeave
Play(i) and Use(i) may cause MEnter


